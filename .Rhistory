for (i in 1:length(test_list)) {
x = test_list[[i]]
if (sum(x$label == 0) != 0) {
unlabeled_index = as.integer(rownames(x[x$label == 0,]))
x = x[-unlabeled_index,]
}
x$label[x$label == -1] = 0
test_list_01[[i]] = x
}
accuracy = function(y_pred, y_act){
return(sum(y_pred == y_act)/length(y_pred))
}
all_0 = function(features){
return(rep(0, nrow(features)))
}
labels_list = list()
for (x in 1:45) {
labels_list[[x]] = train_list_01[[x]][[3]]
}
features_list = list()
for (x in 1:45) {
features_list[[x]] = train_list_01[[x]][-3]
}
CVgeneric = function(classifier="all_0", features=features_list, labels=labels_list, K=5, loss=accuracy){
scores = c()
fold = 1
for (x in 1:K) {
cv_train_features = do.call("rbind", features_list[-seq(9*fold - 8, 9*fold)])
cv_test_features = do.call("rbind", features_list[seq(9*fold - 8, 9*fold)])
cv_train_labels = unlist(labels_list[-seq(9*fold - 8, 9*fold)])
cv_test_labels = unlist(labels_list[seq(9*fold - 8, 9*fold)])
cv_train_features$label = cv_train_labels
cv_test_features$label = cv_test_labels
if (classifier == "all_0") {
pred = all_0(cv_test_features)
}
if (classifier == "logistic") {
model = glm(data=cv_train_features, formula = label ~ NDAI + log_SD + CORR, family = binomial(link="logit"))
pred = round(predict(model, newdata=cv_test_features, type="response"))
}
if (classifier == "lda") {
lda = lda(formula = label ~ NDAI + log_SD + CORR, data = cv_train_features)
pred_probs = predict(lda, newdata = cv_test_features, type="response")
pred = as.integer(pred_probs$class) - 1
}
if (classifier == "qda") {
qda = qda(formula = label ~ NDAI + log_SD + CORR, data = cv_train_features)
pred_probs = predict(qda, newdata = cv_test_features, type="response")
pred = as.integer(pred_probs$class) - 1
}
if (classifier == "xgboost") {
xgboost = xgboost(data = as.matrix(cv_train_features[,c("NDAI", "log_SD", "CORR")]), label = as.matrix(cv_train_features$label), max.depth = 5, eta = 1,
nrounds = 2, objective = "binary:logistic")
pred_probs = predict(xgboost, newdata = as.matrix(cv_test_features[,c("NDAI", "log_SD", "CORR")]), type="response")
pred = round(pred_probs)
}
actual = cv_test_labels
scores = c(scores, accuracy(pred, actual))
fold = fold + 1
}
print("Accuracy for each of K Folds:")
return(scores)
}
CVgeneric(classifier="logistic")
log_reg = glm(data = train, formula = label ~ NDAI + log_SD + CORR, family = binomial(link="logit"))
pred_probs = predict(log_reg, newdata = test, type="response")
logistic_probs <- pred_probs
logistic_test_act = test$label
logistic_test_pred = round(pred_probs)
confusionMatrix(table(logistic_test_pred, logistic_test_act))
CVgeneric(classifier = "lda")
lda = lda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(lda, newdata = test, type="response")
qda_probs <- pred_probs
lda_test_act = test$label
lda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(lda_test_pred, lda_test_act))
CVgeneric(classifier = "qda", K=5)
qda = qda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(qda, newdata = test, type="response")
qda_probs <- pred_probs
qda_test_act = test$label
qda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(qda_test_pred, qda_test_act))
CVgeneric(classifier = "xgboost")
xgboost = xgboost(data = as.matrix(train[,c("NDAI", "log_SD", "CORR")]), label = as.matrix(train$label), max.depth = 5, eta = 1, nrounds = 2, objective = "binary:logistic")
pred_probs = predict(xgboost, newdata = as.matrix(test[,c("NDAI", "log_SD", "CORR")]), type="response")
xgboost_probs <- pred_probs
xgboost_test_act = test$label
xgboost_test_pred = round(pred_probs)
confusionMatrix(table(xgboost_test_pred, xgboost_test_act))
plot(rocit(score=logistic_probs, class=logistic_test_act))
plot(rocit(score=lda_probs, class=lda_test_act))
plot(rocit(score=xgboost_probs, class=xgboost_test_act))
lda = lda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(lda, newdata = test, type="response")
lda_probs <- pred_probs
lda_test_act = test$label
lda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(lda_test_pred, lda_test_act))
plot(rocit(score=lda_probs, class=lda_test_act))
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(ggplot2)
library(plyr)
library(caret)
library(plotROC)
library(ROCit)
library(MASS)
library(drat)
library(xgboost)
#setwd("C:/Users/andre/Desktop/Stat154/project2")
image1 = read.csv('image_data/image1.txt', header=FALSE, sep = "", col.names = c("y", "x", "label", "NDAI", "SD", "CORR", "RADF", "RACF", "RABF", "RAAF", "RAAN"))
image2 = read.csv('image_data/image2.txt', header=FALSE, sep = "", col.names = c("y", "x", "label", "NDAI", "SD", "CORR", "RADF", "RACF", "RABF", "RAAF", "RAAN"))
image3 = read.csv('image_data/image3.txt', header=FALSE, sep = "", col.names = c("y", "x", "label", "NDAI", "SD", "CORR", "RADF", "RACF", "RABF", "RAAF", "RAAN"))
image1["log_SD"] = log(image1$SD)
image2["log_SD"] = log(image2$SD)
image3["log_SD"] = log(image3$SD)
prop.table(table(image1$label))
prop.table(table(image2$label))
prop.table(table(image3$label))
all_images = rbind(image1, image2, image3)
prop.table(table(all_images$label))
ggplot(image1, aes(x=x, y=y, color=factor(label))) + geom_point() + scale_color_manual(values=c("grey", "black", "white")) + ggtitle("Image1")
ggplot(image2, aes(x=x, y=y, color=factor(label))) + geom_point() + scale_color_manual(values=c("grey", "black", "white")) + ggtitle("Image2")
ggplot(image3, aes(x=x, y=y, color=factor(label))) + geom_point() + scale_color_manual(values=c("grey", "black", "white")) + ggtitle("Image3")
library(tidyverse)
library(GGally)
library(reshape2)
library(corrplot)
library(gridExtra)
image1_features = subset(image1, select = -c(label))
image2_features = subset(image2, select = -c(label))
image3_features = subset(image3, select = -c(label))
corrplot(cor(image1))
corrplot(cor(image2))
corrplot(cor(image3))
image1_means = melt(summarise_all(group_by(image1, label), "mean"))
image1_means["sd"] = melt(summarise_all(group_by(image1, label), "sd"))$value
image1_means["label"] = rep(c(-1, 0, 1), 12)
image1_means = image1_means[-c(1, 2, 3),]
image1_means
summarise_all(group_by(image1, label), "mean")
summarise_all(group_by(image2, label), "mean")
summarise_all(group_by(image3, label), "mean")
ndai = ggplot(image1_means[c(7, 8, 9),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("NDAI")
sd = ggplot(image1_means[c(10, 11, 12),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("SD")
corr = ggplot(image1_means[c(13, 14, 15),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("CORR")
radf = ggplot(image1_means[c(16, 17, 18),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("RADF")
racf = ggplot(image1_means[c(19, 20, 21),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("RACF")
rabf = ggplot(image1_means[c(22, 23, 24),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("RABF")
raaf = ggplot(image1_means[c(25, 26, 27),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("RAAF")
raan = ggplot(image1_means[c(28, 29, 30),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("RAAN")
log_SD = ggplot(image1_means[c(28, 29, 30),], aes(x=variable, y=value, fill=factor(label))) + geom_bar(stat="identity", position="dodge") + geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,position=position_dodge(.9)) + ggtitle("log_SD")
grid.arrange(ndai, sd, corr, radf, racf, rabf, raaf, raan, log_SD)
image1_y_lower_vals = c(2, 78, 154, 230, 306)
image1_y_upper_vals = c(78, 154, 230, 306, 384)
image1_x_lower_boundaries = rep(c(65, 126, 187, 248, 309), 5)
image1_x_upper_boundaries = rep(c(126, 187, 248, 309, 370), 5)
image1_y_lower_boundaries = rep(image1_y_lower_vals, each=5)
image1_y_upper_boundaries = rep(image1_y_upper_vals, each=5)
for (i in 1:25){
name = paste("image1_square", as.character(i), sep="")
assign(name, filter(image1, x >= image1_x_lower_boundaries[i] &
x < image1_x_upper_boundaries[i] &
y >= image1_y_lower_boundaries[i] &
y < image1_y_upper_boundaries[i]))
}
image2_y_lower_vals = c(2, 78, 154, 230, 306)
image2_y_upper_vals = c(78, 154, 230, 306, 384)
image2_x_lower_boundaries = rep(c(65, 126, 187, 248, 309), 5)
image2_x_upper_boundaries = rep(c(126, 187, 248, 309, 369), 5)
image2_y_lower_boundaries = rep(image2_y_lower_vals, each=5)
image2_y_upper_boundaries = rep(image2_y_upper_vals, each=5)
for (i in 1:25){
name = paste("image2_square", as.character(i), sep="")
assign(name, filter(image2, x >= image2_x_lower_boundaries[i] &
x < image2_x_upper_boundaries[i] &
y >= image2_y_lower_boundaries[i] &
y < image2_y_upper_boundaries[i]))
}
image3_y_lower_vals = c(2, 78, 154, 230, 306)
image3_y_upper_vals = c(78, 154, 230, 306, 384)
image3_x_lower_boundaries = rep(c(65, 126, 187, 248, 309), 5)
image3_x_upper_boundaries = rep(c(126, 187, 248, 309, 370), 5)
image3_y_lower_boundaries = rep(image3_y_lower_vals, each=5)
image3_y_upper_boundaries = rep(image3_y_upper_vals, each=5)
for (i in 1:25){
name = paste("image3_square", as.character(i), sep="")
assign(name, filter(image3, x >= image3_x_lower_boundaries[i] &
x < image3_x_upper_boundaries[i] &
y >= image3_y_lower_boundaries[i] &
y < image3_y_upper_boundaries[i]))
}
image_squares = list()
for (x in 1:3) {
for (i in 1:25) {
image_squares[[paste("image", as.character(x), "_square", as.character(i), sep="")]] = get(paste("image", as.character(x), "_square", as.character(i), sep=""))
}
}
set.seed(1)
split_sample = sample(c(rep(1, 45), rep(2, 15), rep(3, 15)))
train_list = image_squares[split_sample == 1]
valid_list = image_squares[split_sample == 2]
test_list = image_squares[split_sample == 3]
ggplot(image1, aes(x=x, y=y, color=factor(label))) +
geom_point() +
scale_color_manual(values=c("grey", "black", "white")) +
ggtitle("Image1") +
geom_vline(xintercept=c(65, 126, 187, 248, 309, 370), color="red") +
geom_hline(yintercept=c(2, 78, 154, 230, 306, 384), color="red")
ggplot(image2, aes(x=x, y=y, color=factor(label))) +
geom_point() +
scale_color_manual(values=c("grey", "black", "white")) +
ggtitle("Image2") +
geom_vline(xintercept=c(65, 126, 187, 248, 309, 369), color="red") +
geom_hline(yintercept=c(2, 78, 154, 230, 306, 384), color="red")
ggplot(image3, aes(x=x, y=y, color=factor(label))) +
geom_point() +
scale_color_manual(values=c("grey", "black", "white")) +
ggtitle("Image3") +
geom_vline(xintercept=c(65, 126, 187, 248, 309, 370), color="red") +
geom_hline(yintercept=c(2, 78, 154, 230, 306, 384), color="red")
train = do.call("rbind", train_list)
valid = do.call("rbind", valid_list)
test = do.call("rbind", test_list)
sum(valid$label == -1)/nrow(valid)
sum(test$label == -1)/nrow(test)
ggplot(train, aes(x=NDAI, color=factor(label))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(train, aes(x=log(SD), color=factor(label))) +
geom_histogram(alpha=0.5, position="identity", binwidth = .1, aes(y=..count../sum(..count..)))
ggplot(train, aes(x=CORR, color=factor(label))) +
geom_histogram(alpha=0.5, position="identity")
ggplot(train, aes(x=RADF, color=factor(label))) +
geom_histogram(alpha=0.5, position="identity")
ggplot(train, aes(x=RACF, color=factor(label))) +
geom_histogram(alpha=0.5, position="identity")
ggplot(train, aes(x=RABF, color=factor(label))) +
geom_histogram(alpha=0.5, position="identity")
ggplot(train, aes(x=RAAF, color=factor(label))) +
geom_histogram(alpha=0.5, position="identity")
ggplot(train, aes(x=RAAN, color=factor(label))) +
geom_histogram(alpha=0.5, position="identity")
meme = abs(cor(train[-c(1, 2)]))
meme = as.data.frame(meme)
colnames(meme)[sort(meme$label, index.return=TRUE, decreasing=TRUE)$ix[2:4]]
rownames(train) = NULL
unlabeled_index = as.integer(rownames(train[train$label == 0,]))
train = train[-unlabeled_index,]
train$label[train$label == -1] = 0
rownames(valid) = NULL
unlabeled_index = as.integer(rownames(valid[valid$label == 0,]))
valid = valid[-unlabeled_index,]
valid$label[valid$label == -1] = 0
rownames(test) = NULL
unlabeled_index = as.integer(rownames(test[test$label == 0,]))
test = test[-unlabeled_index,]
test$label[test$label == -1] = 0
train_list_01 = list()
for (i in 1:length(train_list)) {
x = train_list[[i]]
if (sum(x$label == 0) != 0) {
unlabeled_index = as.integer(rownames(x[x$label == 0,]))
x = x[-unlabeled_index,]
}
x$label[x$label == -1] = 0
train_list_01[[i]] = x
}
valid_list_01 = list()
for (i in 1:length(valid_list)) {
x = valid_list[[i]]
if (sum(x$label == 0) != 0) {
unlabeled_index = as.integer(rownames(x[x$label == 0,]))
x = x[-unlabeled_index,]
}
x$label[x$label == -1] = 0
valid_list_01[[i]] = x
}
test_list_01 = list()
for (i in 1:length(test_list)) {
x = test_list[[i]]
if (sum(x$label == 0) != 0) {
unlabeled_index = as.integer(rownames(x[x$label == 0,]))
x = x[-unlabeled_index,]
}
x$label[x$label == -1] = 0
test_list_01[[i]] = x
}
accuracy = function(y_pred, y_act){
return(sum(y_pred == y_act)/length(y_pred))
}
all_0 = function(features){
return(rep(0, nrow(features)))
}
labels_list = list()
for (x in 1:45) {
labels_list[[x]] = train_list_01[[x]][[3]]
}
features_list = list()
for (x in 1:45) {
features_list[[x]] = train_list_01[[x]][-3]
}
CVgeneric = function(classifier="all_0", features=features_list, labels=labels_list, K=5, loss=accuracy){
scores = c()
fold = 1
for (x in 1:K) {
cv_train_features = do.call("rbind", features_list[-seq(9*fold - 8, 9*fold)])
cv_test_features = do.call("rbind", features_list[seq(9*fold - 8, 9*fold)])
cv_train_labels = unlist(labels_list[-seq(9*fold - 8, 9*fold)])
cv_test_labels = unlist(labels_list[seq(9*fold - 8, 9*fold)])
cv_train_features$label = cv_train_labels
cv_test_features$label = cv_test_labels
if (classifier == "all_0") {
pred = all_0(cv_test_features)
}
if (classifier == "logistic") {
model = glm(data=cv_train_features, formula = label ~ NDAI + log_SD + CORR, family = binomial(link="logit"))
pred = round(predict(model, newdata=cv_test_features, type="response"))
}
if (classifier == "lda") {
lda = lda(formula = label ~ NDAI + log_SD + CORR, data = cv_train_features)
pred_probs = predict(lda, newdata = cv_test_features, type="response")
pred = as.integer(pred_probs$class) - 1
}
if (classifier == "qda") {
qda = qda(formula = label ~ NDAI + log_SD + CORR, data = cv_train_features)
pred_probs = predict(qda, newdata = cv_test_features, type="response")
pred = as.integer(pred_probs$class) - 1
}
if (classifier == "xgboost") {
xgboost = xgboost(data = as.matrix(cv_train_features[,c("NDAI", "log_SD", "CORR")]), label = as.matrix(cv_train_features$label), max.depth = 5, eta = 1,
nrounds = 2, objective = "binary:logistic")
pred_probs = predict(xgboost, newdata = as.matrix(cv_test_features[,c("NDAI", "log_SD", "CORR")]), type="response")
pred = round(pred_probs)
}
actual = cv_test_labels
scores = c(scores, accuracy(pred, actual))
fold = fold + 1
}
print("Accuracy for each of K Folds:")
return(scores)
}
CVgeneric(classifier="logistic")
log_reg = glm(data = train, formula = label ~ NDAI + log_SD + CORR, family = binomial(link="logit"))
pred_probs = predict(log_reg, newdata = test, type="response")
logistic_probs <- pred_probs
logistic_test_act = test$label
logistic_test_pred = round(pred_probs)
confusionMatrix(table(logistic_test_pred, logistic_test_act))
CVgeneric(classifier = "lda")
lda = lda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(lda, newdata = test, type="response")
lda_probs <- pred_probs
lda_test_act = test$label
lda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(lda_test_pred, lda_test_act))
CVgeneric(classifier = "qda", K=5)
qda = qda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(qda, newdata = test, type="response")
qda_probs <- pred_probs
qda_test_act = test$label
qda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(qda_test_pred, qda_test_act))
CVgeneric(classifier = "xgboost")
xgboost = xgboost(data = as.matrix(train[,c("NDAI", "log_SD", "CORR")]), label = as.matrix(train$label), max.depth = 5, eta = 1, nrounds = 2, objective = "binary:logistic")
pred_probs = predict(xgboost, newdata = as.matrix(test[,c("NDAI", "log_SD", "CORR")]), type="response")
xgboost_probs <- pred_probs
xgboost_test_act = test$label
xgboost_test_pred = round(pred_probs)
confusionMatrix(table(xgboost_test_pred, xgboost_test_act))
plot(rocit(score=logistic_probs, class=logistic_test_act))
plot(rocit(score=lda_probs, class=lda_test_act))
plot(rocit(score=qda_probs, class=qda_test_act))
View(lda_probs)
lda = lda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(lda, newdata = test, type="response")
lda_probs <- pred_probs$posterior
lda_test_act = test$label
lda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(lda_test_pred, lda_test_act))
qda = qda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(qda, newdata = test, type="response")
qda_probs <- pred_probs$posterior
qda_test_act = test$label
qda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(qda_test_pred, qda_test_act))
plot(rocit(score=lda_probs, class=lda_test_act))
View(pred_probs)
View(qda_probs)
lda = lda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(lda, newdata = test, type="response")
lda_probs <- pred_probs$posterior[,1]
lda_test_act = test$label
lda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(lda_test_pred, lda_test_act))
qda = qda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(qda, newdata = test, type="response")
qda_probs <- pred_probs$posterior[,1]
qda_test_act = test$label
qda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(qda_test_pred, qda_test_act))
plot(rocit(score=lda_probs, class=lda_test_act))
lda = lda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(lda, newdata = test, type="response")
lda_probs <- pred_probs$posterior[,2]
lda_test_act = test$label
lda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(lda_test_pred, lda_test_act))
qda = qda(formula = label ~ NDAI + log_SD + CORR, data = train)
pred_probs = predict(qda, newdata = test, type="response")
qda_probs <- pred_probs$posterior[,2]
qda_test_act = test$label
qda_test_pred = as.integer(pred_probs$class) - 1
confusionMatrix(table(qda_test_pred, qda_test_act))
plot(rocit(score=lda_probs, class=lda_test_act))
plot(rocit(score=qda_probs, class=qda_test_act))
summary(log_reg)
summary(log_reg)
deviance(log_reg)
plot(log_reg)
plot(logistic_probs, train$label)
plot(logistic_probs, test$label)
plot(logistic_probs, test$label)
plot(test$label,logistic_probs)
plot(test$label,logistic_probs)
plot(test$label,logistic_probs)
hist(logistic_probs[logistic_probs = 0])
plot(test$label,logistic_probs)
hist(logistic_probs[logistic_probs = 0], breaks = 10)
plot(test$label,logistic_probs)
hist(as.numeric(logistic_probs[logistic_probs = 0]))
plot(test$label,logistic_probs)
hist(as.numeric(logistic_probs[logistic_probs = 0]), breaks = 10)
plot(test$label,logistic_probs)
hist(as.numeric(logistic_probs[logistic_probs == 0]))
plot(test$label,logistic_probs)
hist(as.numeric(logistic_probs[logistic_probs == 0]), breaks = 10)
plot(test$label,logistic_probs)
logistic_probs[logistic_probs==0]
plot(test$label,logistic_probs)
hist(logistic_probs[test$label==0])
hist(logistic_probs[test$label==1])
plot(test$label,logistic_probs)
hist(logistic_probs[test$label==0], main = "Predicted Values - True Label 0", xlab = "Predicted Value")
hist(logistic_probs[test$label==1], main = "Predicted Values - True Label 1", xlab = "Predicted Value")
plot(test$label,logistic_probs)
plot(test$label,logistic_probs, main = "True Labels v. Predicted Probability", xlab = "True Label", ylab = "Predicted Probability")
hist(logistic_probs[test$label==0], main = "Predicted Values - True Label 0", xlab = "Predicted Value")
hist(logistic_probs[test$label==1], main = "Predicted Values - True Label 1", xlab = "Predicted Value")
test[logistic_test_act != logistic_test_pred,]
logistic_incorrect <- test[logistic_test_act != logistic_test_pred,]
logistic_test <- test
logistic_test$correct <- rep(0,length(logistic_probs))
logistic_test$correct[logistic_test_act = logistic_test_pred] <- 1
View(logistic_test)
logistic_test <- test
logistic_test$correct <- rep(0,length(logistic_probs))
logistic_test$correct[logistic_test_act == logistic_test_pred] <- 1
length(logistic_test[logistic_test$correct ==1])
logistic_test <- test
logistic_test$correct <- rep(0,length(logistic_probs))
logistic_test$correct[logistic_test_act == logistic_test_pred] <- 1
length(logistic_test[logistic_test$correct ==1,])
logistic_test <- test
logistic_test$correct <- rep(0,length(logistic_probs))
logistic_test$correct[logistic_test_act == logistic_test_pred] <- 1
nrow(logistic_test[logistic_test$correct ==1,])
logistic_test <- test
logistic_test$correct <- rep(0,length(logistic_probs))
logistic_test$correct[logistic_test_act == logistic_test_pred] <- 1
nrow(logistic_test[logistic_test$correct ==0,])
View(racf)
ggplot(logistic_test, aes(x=NDAI, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(train, aes(x=sd, color=factor(label))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(train, aes(x=SD, color=factor(label))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=NDAI, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(train, aes(x=SD, color=factor(label))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(train, aes(x=CORR, color=factor(label))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(train, aes(x=SD, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=SD, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=CORR, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=x, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=x, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=y, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=log(SD), color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=RADF, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=RADF, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=RACF, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=RABF, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=RAAF, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
ggplot(logistic_test, aes(x=RAAN, color=factor(correct))) +
geom_histogram(alpha=0.5, position = "identity")
var.test(logistic_test$CORR[logistic_test$correct == 1], logistic_test$CORR[logistic_test$correct == 0])
t.test(logistic_test$CORR[logistic_test$correct == 1], logistic_test$CORR[logistic_test$correct == 0])
